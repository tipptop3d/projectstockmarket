from datetime import datetime

class InvalidToken(Exception): ...
class IncorrectPassword(Exception): ...
class AccountAlreadyExists(Exception): ...
class NotEnoughMoney(Exception): ...
class NotInInventory(Exception): ...
class OutOfStock(Exception): ...
class ProductNotFound(Exception): ...

# MARKET LOGIC

class Record:
    date: datetime
    value: int

    def __init__(self, date: datetime, value: int) -> None: ...

class Product:
    name: str
    id: int

    def get_all_records(self) -> list[Record]: ...
    def get_records(self, from_: datetime, to: datetime) -> list[Record]: ...

class ProductEntry:
    product: Product
    amount: int

    def __init__(self, product: Product, amount: int) -> None: ...

class User:
    id: int
    name: str
    balance: int

    def get_inventory(self) -> list[ProductEntry]: ...
    def buy_product(self, product: Product, amount: int) -> None: ...
    def sell_product(self, product: Product, amount: int) -> None: ...

class MarketPlace:
    def __init__(
        self, limit_record_entries: int, try_generate_products: bool
    ) -> None: ...
    def get_inventory(self) -> list[ProductEntry]: ...
    def get_all_products(self) -> list[Product]: ...

def get_product(product_id: int) -> Product: ...
def get_user(user_id: int) -> User: ...
def init_database(path: str) -> None: ...

# AUTH LOGIC

class Account:
    username: str
    password: str

    def __init__(self, username: str, password: str) -> None: ...

def db_verify_credentials(account: Account) -> int: ...
def db_register_account(account: Account, display_name: str) -> str: ...
def db_add_token(account_id: int, token: str) -> None: ...
def db_remove_token(token: str) -> None: ...
def db_get_user_by_token(token: str) -> User: ...
